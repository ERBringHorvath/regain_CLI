#!/usr/bin/env python3

"""

ReGAIN and its analytical modules are under Copyright 2024 University of Utah.

Authors:
    Elijah R. Bring Horvath, Mathew G. Stein, Matthew A. Mulvey, E. Javier Hernandez, Jaclyn M. Winter

"""

import argparse, logging, sys, subprocess, os
from datetime import datetime

def run_bnL(args):
    dir_of_executable = os.path.dirname(os.path.realpath(__file__))
    path_to_shell_script = os.path.join(dir_of_executable, 'bnCPQuery.sh')
    command = [path_to_shell_script, args.input, args.metadata, args.output_boot, str(args.threads), str(args.number_of_bootstraps), str(args.number_of_resamples)]
    subprocess.run(command)

def run_bnS(args):
    dir_of_executable = os.path.dirname(os.path.realpath(__file__))
    path_to_shell_script = os.path.join(dir_of_executable, 'bnQueryGrain.sh')
    command = [path_to_shell_script, args.input, args.metadata, args.output_boot, str(args.threads), str(args.number_of_bootstraps), str(args.number_of_resamples)]
    subprocess.run(command)

def run_mva(args):
    dir_of_executable = os.path.dirname(os.path.realpath(__file__))
    path_to_shell_script = os.path.join(dir_of_executable, 'mva.sh')
    command = [path_to_shell_script, args.input, args.method, str(args.num_centers), str(args.confidence)]
    subprocess.run(command)

def main():
    parser = argparse.ArgumentParser(prog='regain')
    parser.add_argument('-v', '--version', action='version', version='%(prog)s v.1.2.0')

    subparsers = parser.add_subparsers(dest='command')

    mva_parser = subparsers.add_parser('MVA')
    mva_parser.add_argument('-i', '--input', required=True, help='Input data file in CSV format')
    mva_parser.add_argument('-m', '--method', default='euclidean', help='manhattan, euclidean, canberra, clark, bray, kulczynski, jaccard, gower, altGower, morisita, horn, mountford, raup, binomial, chao, cao, mahalanobis, chisq, chord, hellinger, aitchison, or robust.aitchison')
    mva_parser.add_argument('-c', '--num_centers', type=int, default=1, help='How many clusters to group into (max 10)')
    mva_parser.add_argument('-C', '--confidence', type=float, default=0.95, help='Enter confidence value')
    
    amr_parser = subparsers.add_parser('AMR')
    amr_parser.add_argument('-d', '--directory', required=True, help='The directory containing your FASTA files')
    amr_parser.add_argument('-O', '--organism', help='Specify an organism for the AMRfinder search')
    amr_parser.add_argument('-T', '--threads', type=int, help='Dedicated threads')
    amr_parser.add_argument('-o', '--output-dir', help='Output directory path')
    
    bnL_parser = subparsers.add_parser('bnL')
    bnL_parser.add_argument('-i', '--input', required=True, help='Input file in CSV format')
    bnL_parser.add_argument('-M', '--metadata', required=True, help='Input metadata file with genes to query')
    bnL_parser.add_argument('-o', '--output_boot', required=True, help='Output file name for Network')
    bnL_parser.add_argument('-T', '--threads', type=int, help='Dedicated threads')
    bnL_parser.add_argument('-n', '--number-of-bootstraps', required=True, type=int, help='Bootstrap number (ideally 300-500)')
    bnL_parser.add_argument('-r', '--number-of-resamples', required=True, help='Input number of data resamples')
    
    bnS_parser = subparsers.add_parser('bnS')
    bnS_parser.add_argument('-i', '--input', required=True, help='Input file in CSV format')
    bnS_parser.add_argument('-M', '--metadata', required=True, help='Input metadata file with genes to query')
    bnS_parser.add_argument('-o', '--output_boot', required=True, help='Output file name for Network')
    bnS_parser.add_argument('-T', '--threads', type=int, help='Dedicated threads')
    bnS_parser.add_argument('-n', '--number-of-bootstraps', required=True, type=int, help='Bootstrap number (ideally 300-500)')
    bnS_parser.add_argument('-r', '--number-of-resamples', required=True, help='Input number of data resamples')

    matrix_parser = subparsers.add_parser('matrix')
    matrix_parser.add_argument('-d', '--directory', required=True, help='Input directory to CSV files to search')
    matrix_parser.add_argument('-f', '--search-strings-output', required=True, help='Output metadata file with non-simplified gene names')
    matrix_parser.add_argument('--simplify-gene-names', action='store_true', help='Replace special characters in gene names when invoked')
    matrix_parser.add_argument('-s', '--search-output', required=True, help='Combined CSV file with all gene data, regardless of min/max values')
    matrix_parser.add_argument('--min', type=int, default=5, required=True, help='Minimum required gene occurrences')
    matrix_parser.add_argument('--max', type=int, help='Maximum allowed gene occurrences')
    matrix_parser.add_argument('-o', '--output', required=True, help='Output of final presence/absence matrix')
    matrix_parser.add_argument('--gene-type', required=True, choices=['resistance', 'virulence'], help='specify gene type: resistance, virulence)

    args = parser.parse_args()

    # Set up logging for our program
    logging.basicConfig(filename=f'{args.command}_log.txt', level=logging.INFO)
    logging.info(f'Program started at {datetime.now()}')
    logging.info(f'User command: {" ".join(sys.argv)}')

    logging.getLogger('rpy2').setLevel(logging.INFO)

    if args.command == 'AMR':
        import AMR
        AMR.run(args)
    elif args.command == 'bnL':
        run_bnL(args)
    elif args.command == 'bnS':
        run_bnS(args)
    elif args.command == 'MVA':
        run_mva(args)
    elif args.command == 'matrix':
        import matrix
        matrix.run(args)
    else:
        parser.print_help()
    
    logging.info(f'Program ended at {datetime.now()}')

if __name__ == "__main__":
    main()
